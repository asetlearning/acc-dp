//
// Created by dpantele on 11/8/15.
//

#include <gtest/gtest.h>

#include "harvest.h"

namespace crag { namespace {

using Word = FoldedGraph::Word;
using Label = FoldedGraph::Label;

TEST(FoldedGraph, Harvest1) {
  FoldedGraph g;
  g.PushCycle(Word("xxyx"));
  g.PushCycle(Word("xyyX"));

  auto words = Harvest(g, 10, g.root(), g.root().edge(Label('X')).terminus(), 0);

  std::vector<Word> correct = {
      { 1 },
      { 0, 0, 2 },
      { 0, 2, 2, 0, 2 },
      { 0, 2, 2, 1, 1 },
      { 0, 3, 3, 0, 2 },
      { 0, 3, 3, 1, 1 },
      { 1, 3, 1, 1, 1 },
      { 0, 0, 2, 0, 0, 0, 2 },
      { 0, 2, 2, 2, 2, 0, 2 },
      { 0, 2, 2, 2, 2, 1, 1 },
      { 0, 3, 3, 3, 3, 0, 2 },
      { 0, 3, 3, 3, 3, 1, 1 },
      { 1, 3, 1, 2, 2, 0, 2 },
      { 1, 3, 1, 2, 2, 1, 1 },
      { 1, 3, 1, 3, 3, 0, 2 },
      { 1, 3, 1, 3, 3, 1, 1 },
      { 0, 0, 2, 0, 0, 2, 2, 0, 2 },
      { 0, 0, 2, 0, 0, 2, 2, 1, 1 },
      { 0, 0, 2, 0, 0, 3, 3, 0, 2 },
      { 0, 0, 2, 0, 0, 3, 3, 1, 1 },
      { 0, 2, 2, 0, 2, 0, 0, 0, 2 },
      { 0, 2, 2, 1, 1, 3, 1, 1, 1 },
      { 0, 2, 2, 2, 2, 2, 2, 0, 2 },
      { 0, 2, 2, 2, 2, 2, 2, 1, 1 },
      { 0, 3, 3, 0, 2, 0, 0, 0, 2 },
      { 0, 3, 3, 1, 1, 3, 1, 1, 1 },
      { 0, 3, 3, 3, 3, 3, 3, 0, 2 },
      { 0, 3, 3, 3, 3, 3, 3, 1, 1 },
      { 1, 3, 1, 1, 1, 3, 1, 1, 1 },
      { 1, 3, 1, 2, 2, 2, 2, 0, 2 },
      { 1, 3, 1, 2, 2, 2, 2, 1, 1 },
      { 1, 3, 1, 3, 3, 3, 3, 0, 2 },
      { 1, 3, 1, 3, 3, 3, 3, 1, 1 }
  };

  EXPECT_EQ(correct, words);
}


} }